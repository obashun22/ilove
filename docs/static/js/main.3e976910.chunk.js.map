{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["generateImage","canvas","keyword","ctx","getContext","width","height","fillStyle","fillRect","font","fillText","useStyles","makeStyles","theme","createStyles","border","btn","margin","spacing","bagReport","color","App","classes","useState","setKeyword","canvasRef","useRef","useEffect","current","className","AppBar","position","Toolbar","Typography","variant","Container","maxWidth","Box","py","id","ref","TextField","label","value","onChange","e","target","Button","onClick","a","document","createElement","href","toDataURL","download","click","saveCanvas","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3e976910.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\n\n// material-ui\nimport Container from '@material-ui/core/Container';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Box from '@material-ui/core/Box';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\n\n// 画像を生成する\nconst generateImage = (canvas: HTMLCanvasElement, keyword: string) => {\n  let ctx = canvas.getContext('2d')!;\n  const width = canvas.width;\n  const height = canvas.height;\n\n  // 背景\n  ctx.fillStyle = '#fff';\n  ctx.fillRect(0, 0, width, height);\n  \n  // 図形\n  ctx.font = \"400px 'Dela Gothic One'\";\n  ctx.fillStyle = \"hsla(348, 88%, 51%, 0.15)\";\n  ctx.fillText(\"❤︎\", 645, height - 195);\n\n  // I\n  ctx.fillStyle = \"#333\";\n  ctx.font = \"180px 'Dela Gothic One'\";\n  ctx.fillText(\"I\", 110, height - 250);\n\n  // LOVE\n  ctx.fillStyle = \"#f0133f\";\n  ctx.font = \"150px 'Dela Gothic One'\";\n  ctx.fillText(\"LOVE\", 295, height - 250);\n\n  // Keyword\n  ctx.font = \"150px 'Dela Gothic One'\";\n  ctx.fillStyle = \"#333\";\n  ctx.fillText(keyword, 110, height - 80);\n};\n\n// 画像を保存する\nconst saveCanvas = (canvas: HTMLCanvasElement) => {\n\t//アンカータグを作成\n\tlet a = document.createElement('a');\n\t//canvasをJPEG変換し、そのBase64文字列をhrefへセット\n\ta.href = canvas.toDataURL('image/png', 1);\n\t//ダウンロード時のファイル名を指定\n\ta.download = 'download.png';\n\t//クリックイベントを発生させる\n\ta.click();\n};\n\n// material-uiにおけるスタイル適応に用いる\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    canvas: {\n      width: '100%',\n      border: 'solid 1px gray',\n    },\n    btn: {\n      margin: theme.spacing(1),\n    },\n    bagReport: {\n      color: 'silver',\n    }\n  }),\n);\n\nconst App: React.FC = () => {\n  const classes = useStyles();\n  const [keyword, setKeyword] = useState<string>(\"ONSYA\"); // キーワードを保持\n\n  const canvasRef = useRef<HTMLCanvasElement | null>(null); // canvasの参照\n\n  useEffect(() => {\n    if (canvasRef.current) {\n      let canvas = canvasRef.current;\n      generateImage(canvas, keyword); // 初期画面の描画\n    }\n  }, []);\n\n  return (\n    <div className=\"App\">\n      {/* header */}\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\">\n            I LOVE Generator\n          </Typography>\n        </Toolbar>\n      </AppBar>\n\n      {/* main */}\n      <Container maxWidth=\"sm\">\n        {/* Boxはスタイル適応のためのdiv要素に近い */}\n        <Box py={3}>\n          <canvas\n            id=\"canvas\"\n            className={classes.canvas}\n            width=\"1920\"\n            height=\"1080\"\n            ref={canvasRef}\n          />\n        </Box>\n\n        <Box py={1}>\n          <TextField\n            label=\"I LOVE\"\n            variant=\"outlined\"\n            value={keyword}\n            onChange={ e => setKeyword(e.target.value) }\n          />\n        </Box>\n\n        <Box py={1}>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.btn}\n            onClick={ () => { generateImage(canvasRef.current!, keyword); } }>\n            生成する\n          </Button>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.btn}\n            onClick={ () => { saveCanvas(canvasRef.current!) } }>\n            保存\n          </Button>\n        </Box>\n\n        <h3>使い方</h3>\n        1. <strong>好きなもの</strong>を入力<br />\n        2. 【<strong>生成する</strong>】をクリック<br />\n        3. 【<strong>保存</strong>】をクリック<br />\n        ※PCのみ対応\n        <p>\n          様々なオンラインイベントの背景画像として使えます。<br />\n          例. 就活の面接、商談、交流会、授業など\n        </p>\n        <div className={classes.bagReport}>\n          <h3>バグ</h3>\n          <p>\n            初回読み込み時にフォントが反映されない<br />\n            たまにフォントが日本語非対応<br />\n            スマホで保存できない\n          </p>\n        </div>\n        <hr />\n        <p>©2021 shunsuke oba</p>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}